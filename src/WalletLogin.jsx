// src/WalletLogin.jsx
import React, { useEffect, useState, useRef } from "react";
import { ethers } from "ethers";
import CoinbaseWalletSDK from "@coinbase/wallet-sdk";
import { EthereumProvider } from "@walletconnect/ethereum-provider";

export default function WalletLogin() {
  const [token, setToken] = useState(null);
  const [connector, setConnector] = useState("metamask");
  const [language, setLanguage] = useState("de");
  const [langMenuOpen, setLangMenuOpen] = useState(false);
  const langRef = useRef(null);

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const accessToken = params.get("accessToken");
    if (!accessToken) {
      alert("‚ùå Zugriffstoken fehlt in der URL.");
      return;
    }
    setToken(accessToken);
  }, []);

  useEffect(() => {
    function handleClickOutside(e) {
      if (langRef.current && !langRef.current.contains(e.target)) {
        setLangMenuOpen(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const connectors = [
    { id: "metamask", name: "MetaMask", logo: "/logos/metamask.png" },
    { id: "walletconnect", name: "WalletConnect", logo: "/logos/walletconnect.png" },
    { id: "coinbase", name: "Coinbase Wallet", logo: "/logos/coinbase.png" }
  ];

  const languages = [
    { code: "de", label: "Deutsch" },
    { code: "en", label: "English" },
    { code: "fr", label: "Fran√ßais" },
    { code: "pl", label: "Polski" },
    { code: "ru", label: "–†—É—Å—Å–∫–∏–π" },
    { code: "zh", label: "‰∏≠Êñá" },
    { code: "it", label: "Italiano" },
    { code: "es", label: "Espa√±ol" },
    { code: "pt", label: "Portugu√™s" },
    { code: "ja", label: "Êó•Êú¨Ë™û" },
    { code: "hi", label: "‡§π‡§ø‡§Ç‡§¶‡•Ä" },
    { code: "af", label: "Afrikaans" }
  ];

  const translations = {
    de: { header: "üîê Wallet-Verbindung starten", guidePrefix: "Noch keine Wallet? ", guideLink: "Hier gibt's eine 2‚ÄëMinuten-Anleitung.", connect: "Mit {name} verbinden", back: "zur√ºck zur Login-Seite" },
    en: { header: "üîê Connect Wallet", guidePrefix: "No wallet yet? ", guideLink: "Here's a 2‚Äëminute guide.", connect: "Connect with {name}", back: "Back to login page" },
    fr: { header: "üîê Connecter le portefeuille", guidePrefix: "Pas encore de portefeuille ? ", guideLink: "Voici un guide de 2¬†minutes.", connect: "Se connecter avec {name}", back: "Retour √† la page de connexion" },
    pl: { header: "üîê Po≈ÇƒÖcz portfel", guidePrefix: "Jeszcze nie masz portfela? ", guideLink: "Oto przewodnik w 2¬†minuty.", connect: "Po≈ÇƒÖcz z {name}", back: "Powr√≥t do strony logowania" },
    ru: { header: "üîê –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", guidePrefix: "–ï—â—ë –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞? ", guideLink: "–í–æ—Ç –¥–≤—É—Ö–º–∏–Ω—É—Ç–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.", connect: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {name}", back: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞" },
    zh: { header: "üîê ËøûÊé•Èí±ÂåÖ", guidePrefix: "ËøòÊ≤°ÊúâÈí±ÂåÖÔºü ", guideLink: "ËøôÈáåÊúâ‰∏Ä‰∏™2ÂàÜÈíüÊïôÁ®ã„ÄÇ", connect: "‰ΩøÁî®{name}ËøûÊé•", back: "ËøîÂõûÁôªÂΩïÈ°µÈù¢" },
    it: { header: "üîê Connetti portafoglio", guidePrefix: "Non hai ancora un portafoglio? ", guideLink: "Ecco una guida di 2¬†minuti.", connect: "Connetti con {name}", back: "Torna alla pagina di accesso" },
    es: { header: "üîê Conectar billetera", guidePrefix: "¬øNo tienes cartera? ", guideLink: "Aqu√≠ tienes una gu√≠a de 2¬†minutos.", connect: "Conectar con {name}", back: "Volver a la p√°gina de inicio de sesi√≥n" },
    pt: { header: "üîê Conectar carteira", guidePrefix: "Ainda n√£o tem uma carteira? ", guideLink: "Aqui est√° um guia de 2¬†minutos.", connect: "Conectar com {name}", back: "Voltar √† p√°gina de login" },
    ja: { header: "üîê „Ç¶„Ç©„É¨„ÉÉ„Éà„ÇíÊé•Á∂ö", guidePrefix: "„Åæ„Å†„Ç¶„Ç©„É¨„ÉÉ„Éà„Åå„Å™„ÅÑ„Åß„Åô„ÅãÔºü ", guideLink: "2ÂàÜ„Ç¨„Ç§„Éâ„ÅØ„Åì„Å°„Çâ„ÄÇ", connect: "{name}„ÅßÊé•Á∂ö", back: "„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å´Êàª„Çã" },
    hi: { header: "üîê ‡§µ‡•â‡§≤‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç", guidePrefix: "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§µ‡•â‡§≤‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à? ", guideLink: "‡§Ø‡§π‡§æ‡§Å 2‚Äë‡§Æ‡§ø‡§®‡§ü ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ø‡§ï‡§æ ‡§π‡•à‡•§", connect: "{name} ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç", back: "‡§≤‡•â‡§ó‡§ø‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å" },
    af: { header: "üîê Sluit beursie aan", guidePrefix: "Nog geen beursie? ", guideLink: "Hier is 'n 2‚Äëminuut gids.", connect: "Verbind met {name}", back: "Terug na aanmeldbladsy" }
  };

  const t = translations[language];
  const connectText = t.connect.replace("{name}", connectors.find(c => c.id === connector).name);
  const currentLang = languages.find(l => l.code === language);

  function connectHandler() {
    if (!token) {
      alert(t.guidePrefix + t.connect.replace("{name}", connectors.find(c => c.id === connector).name));
      return;
    }
    (async () => {
      let provider;
      try {
        if (connector === "metamask") {
          if (!window.ethereum) { alert("‚ö†Ô∏è Bitte installiere MetaMask."); return; }
          await window.ethereum.request({ method: "eth_requestAccounts" });
          provider = new ethers.BrowserProvider(window.ethereum);
        } else if (connector === "walletconnect") {
          const wc = await EthereumProvider.init({ projectId: process.env.NEXT_PUBLIC_WC_PROJECT_ID, chains: [1], showQrModal: true });
          await wc.enable();
          provider = new ethers.BrowserProvider(wc);
        } else {
          const cb = new CoinbaseWalletSDK({ appName: "MeinShop", darkMode: false });
          const cbProv = cb.makeWeb3Provider(process.env.NEXT_PUBLIC_INFURA_URL, 1);
          await cbProv.request({ method: "eth_requestAccounts" });
          provider = new ethers.BrowserProvider(cbProv);
        }
        const signer = await provider.getSigner();
        const address = await signer.getAddress();
        window.location.href = `https://www.goldsilverstuff.com/wallet-callback?token=${token}&wallet=${address}`;
      } catch (err) {
        console.error(err);
        alert("‚ùå Verbindung zur Wallet fehlgeschlagen.");
      }
    })();
  }

  return (
    <div style={{ position: 'relative', maxWidth: '400px', margin: '2rem auto', textAlign: 'center', fontFamily: 'Arial, sans-serif' }}>
      {/* Language Dropdown */}
      <div ref={langRef} style={{ position: 'absolute', top: '0.5rem', right: '0.5rem' }}>
        <button onClick={() => setLangMenuOpen(!langMenuOpen)} style={{ display: 'flex', alignItems: 'center', padding: '4px', background: '#fff', border: '1px solid #ccc', borderRadius: '4px', cursor: 'pointer' }}>
          <img src={`/logos/${currentLang.code}.png`} alt={currentLang.label} style={{ width: '16px', height: '16px', marginRight: '4px' }} />
          <span style={{ fontSize: '12px' }}>{currentLang.label}</span>
        </button>
        {langMenuOpen && (
          <div style={{ marginTop: '4px', background: '#fff', border: '1px solid #ccc', borderRadius: '4px', boxShadow: '0 2px 8px rgba(0,0,0,0.1)' }}>
            {languages.map(lang => (
              <div key={lang.code} onClick={() => { setLanguage(lang.code); setLangMenuOpen(false); }} style={{ display: 'flex', alignItems: 'center', padding: '4px 8px', cursor: 'pointer' }}>
                <img src={`/logos/${lang.code}.png`} alt={lang.label} style={{ width: '16px', height: '16px', marginRight: '8px' }} />
                <span style={{ fontSize: '12px' }}>{lang.label}</span>
              </div>
            ))}
          </div>
        )}
      </div>

      <img src="/logos/company-logo.png" alt="Company Logo" style={{ maxWidth: '150px', marginBottom: '0.5rem' }} />
      <p style={{ marginBottom: '1.5rem', fontSize: '16px', fontWeight: 'bold', color: '#555' }}>
        GoldSilverStuff.com¬©
      </p>
      <h2 style={{ marginBottom: '1rem' }}>{t.header}</h2>

      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '1.5rem' }}>
        {connectors.map(c => (
          <button key={c.id} onClick={() => setConnector(c.id)} style={{ flex: 1, padding: '0.75rem', margin: '0 0.25rem', border: connector === c.id ? '2px solid #0070f3' : '1px solid #ccc', borderRadius: '8px', background: '#fff', cursor: 'pointer', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            <img src={c.logo} alt={c.name} style={{ width: '24px', height: '24px', marginRight: '0.5rem' }} />
            {c.name}
          </button>
        ))}
      </div>
      <button onClick={connectHandler} style={{ width: '100%', padding: '12px', fontSize: '18px', backgroundColor: '#222', color: '#fff', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>
        {connectText}
      </button>
      <p style={{ marginTop: '1.5rem', fontSize: '14px', color: '#555' }}>
        {t.guidePrefix}<a href="https://www.youtube-nocookie.com/watch?v=465676767787" target="_blank" rel="noopener noreferrer">{t.guideLink}</a>
      </p>
      <button onClick={() => { window.location.href = '/wallet-login-page'; }} style={{ marginTop: '2rem', padding: '8px 16px', fontSize: '14px', backgroundColor: '#eee', color: '#222', border: '1px solid #ccc', borderRadius: '4px', cursor: 'pointer' }}>
        {t.back}
      </div>
    </div>
  );
}
