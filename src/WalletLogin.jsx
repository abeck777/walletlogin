// src/WalletLogin.jsx
import React, { useEffect, useState, useRef } from "react";
import { ethers } from "ethers";
import CoinbaseWalletSDK from "@coinbase/wallet-sdk";
import { EthereumProvider } from "@walletconnect/ethereum-provider";
import CookieConsent from "react-cookie-consent";

export default function WalletLogin() {
  const [token, setToken] = useState(null);
  const [connector, setConnector] = useState("metamask");
  const [language, setLanguage] = useState("de");
  const [langMenuOpen, setLangMenuOpen] = useState(false);
  const langRef = useRef(null);

  // Token aus URL lesen
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const accessToken = params.get("accessToken");
    if (!accessToken) {
      alert("‚ùå Zugriffstoken fehlt in der URL.");
      return;
    }
    setToken(accessToken);
  }, []);

  // Sprachmen√º schlie√üen bei Klick au√üerhalb
  useEffect(() => {
    function handleClickOutside(e) {
      if (langRef.current && !langRef.current.contains(e.target)) {
        setLangMenuOpen(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const connectors = [
    { id: "metamask", name: "MetaMask", logo: "/logos/metamask.png" },
    { id: "walletconnect", name: "WalletConnect", logo: "/logos/walletconnect.png" },
    { id: "coinbase", name: "Coinbase Wallet", logo: "/logos/coinbase.png" }
  ];

  const languages = [
    { code: "de", label: "Deutsch",    flag: "/logos/germany.png" },
    { code: "en", label: "English",    flag: "/logos/usa.png" },
    { code: "fr", label: "Fran√ßais",   flag: "/logos/france.png" },
    { code: "pl", label: "Polski",     flag: "/logos/poland.png" },
    { code: "ru", label: "–†—É—Å—Å–∫–∏–π",    flag: "/logos/russia.png" },
    { code: "zh", label: "‰∏≠Êñá",        flag: "/logos/china.png" },
    { code: "it", label: "Italiano",   flag: "/logos/italy.png" },
    { code: "es", label: "Espa√±ol",    flag: "/logos/spain.png" },
    { code: "pt", label: "Portugu√™s",  flag: "/logos/portugal.png" },
    { code: "ja", label: "Êó•Êú¨Ë™û",      flag: "/logos/japan.png" },
    { code: "hi", label: "‡§π‡§ø‡§Ç‡§¶‡•Ä",       flag: "/logos/india.png" },
    { code: "af", label: "Afrikaans",  flag: "/logos/southafrica.png" }
  ];

  const translations = {
    de: { header: "üîê Wallet-Verbindung starten", guidePrefix: "Noch keine Wallet? ", guideLink: "Hier gibt's eine 2-Minuten-Anleitung.", connect: "Mit {name} verbinden", back: "zur√ºck zur Login-Seite", cookie: "Diese Website verwendet Cookies, um dein Erlebnis zu verbessern.", accept: "Akzeptieren" },
    en: { header: "üîê Connect Wallet",         guidePrefix: "No wallet yet? ", guideLink: "Here's a 2-minute guide.", connect: "Connect with {name}",  back: "Back to login page",      cookie: "This website uses cookies to enhance your experience.", accept: "Accept" },
    fr: { header: "üîê Connecter le portefeuille", guidePrefix: "Pas encore de portefeuille ? ", guideLink: "Voici un guide de 2 minutes.", connect: "Se connecter avec {name}", back: "Retour √† la page de connexion", cookie: "Ce site utilise des cookies pour am√©liorer votre exp√©rience.", accept: "Accepter" },
    pl: { header: "üîê Po≈ÇƒÖcz portfel",           guidePrefix: "Jeszcze nie masz portfela? ", guideLink: "Oto przewodnik w 2 minuty.", connect: "Po≈ÇƒÖcz z {name}",     back: "Powr√≥t do strony logowania", cookie: "Ta strona u≈ºywa plik√≥w cookie, aby poprawiƒá Twoje do≈õwiadczenie.", accept: "Akceptuj" },
    ru: { header: "üîê –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫",       guidePrefix: "–ï—â—ë –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞? ", guideLink: "–í–æ—Ç –¥–≤—É—Ö–º–∏–Ω—É—Ç–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.", connect: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {name}", back: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞", cookie: "–≠—Ç–æ—Ç —Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–π–ª—ã cookie –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞.", accept: "–ü—Ä–∏–Ω—è—Ç—å" },
    zh: { header: "üîê ËøûÊé•Èí±ÂåÖ",                guidePrefix: "ËøòÊ≤°ÊúâÈí±ÂåÖÔºü ", guideLink: "ËøôÈáåÊúâ‰∏Ä‰∏™2ÂàÜÈíüÊïôÁ®ã„ÄÇ", connect: "‰ΩøÁî®{name}ËøûÊé•",   back: "ËøîÂõûÁôªÂΩïÈ°µÈù¢",          cookie: "Ê≠§ÁΩëÁ´ô‰ΩøÁî® Cookie Êù•Â¢ûÂº∫ÊÇ®ÁöÑ‰ΩìÈ™å„ÄÇ", accept: "Êé•Âèó" },
    it: { header: "üîê Connetti portafoglio",    guidePrefix: "Non hai ancora un portafoglio? ", guideLink: "Ecco una guida di 2 minuti.", connect: "Connetti con {name}", back: "Torna alla pagina di accesso", cookie: "Questo sito utilizza i cookie per migliorare la tua esperienza.", accept: "Accetta" },
    es: { header: "üîê Conectar billetera",      guidePrefix: "¬øNo tienes cartera? ", guideLink: "Aqu√≠ tienes una gu√≠a de 2 minutos.", connect: "Conectar con {name}", back: "Volver a la p√°gina de inicio de sesi√≥n", cookie: "Este sitio utiliza cookies para mejorar tu experiencia.", accept: "Aceptar" },
    pt: { header: "üîê Conectar carteira",       guidePrefix: "Ainda n√£o tem uma carteira? ", guideLink: "Aqui est√° um guia de 2 minutos.", connect: "Conectar com {name}", back: "Voltar √† p√°gina de login", cookie: "Este site usa cookies para melhorar sua experi√™ncia.", accept: "Aceitar" },
    ja: { header: "üîê „Ç¶„Ç©„É¨„ÉÉ„Éà„ÇíÊé•Á∂ö",         guidePrefix: "„Åæ„Å†„Ç¶„Ç©„É¨„ÉÉ„Éà„Åå„Å™„ÅÑ„Åß„Åô„ÅãÔºü ", guideLink: "2ÂàÜ„Ç¨„Ç§„Éâ„ÅØ„Åì„Å°„Çâ„ÄÇ", connect: "{name}„ÅßÊé•Á∂ö", back: "„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å´Êàª„Çã",      cookie: "„Åì„ÅÆ„Çµ„Ç§„Éà„Åß„ÅØ„ÇØ„ÉÉ„Ç≠„Éº„Çí‰ΩøÁî®„Åó„Å¶„É¶„Éº„Ç∂„Éº‰ΩìÈ®ì„ÇíÂêë‰∏ä„Åï„Åõ„Å¶„ÅÑ„Åæ„Åô„ÄÇ", accept: "ÂêåÊÑè„Åô„Çã" },
    hi: { header: "üîê ‡§µ‡•â‡§≤‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç",       guidePrefix: "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§µ‡•â‡§≤‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à? ", guideLink: "‡§Ø‡§π‡§æ‡§Å 2-‡§Æ‡§ø‡§®‡§ü ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ø‡§ï‡§æ ‡§π‡•à‡•§", connect: "{name} ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç", back: "‡§≤‡•â‡§ó‡§ø‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å", cookie: "‡§Ø‡§π ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§", accept: "‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç" },
    af: { header: "üîê Sluit beursie aan",       guidePrefix: "Nog geen beursie? ", guideLink: "Hier is ‚Äôn 2-minuut gids.", connect: "Verbind met {name}", back: "Terug na aanmeldbladsy",      cookie: "Hierdie webwerf gebruik koekies om u ervaring te verbeter.", accept: "Aksepteer" }
  };

  const t = translations[language];
  const connectText = t.connect.replace("{name}", connectors.find(c => c.id === connector).name);
  const currentLang = languages.find(l => l.code === language);

  async function connectHandler() {
    if (!token) {
      alert(t.guidePrefix + connectText);
      return;
    }

    let provider;
    try {
      if (connector === "metamask") {
        if (!window.ethereum) {
          alert("‚ö†Ô∏è Bitte installiere MetaMask.");
          return;
        }
        await window.ethereum.request({ method: "eth_requestAccounts" });
        provider = new ethers.BrowserProvider(window.ethereum);

      } else if (connector === "walletconnect") {
        const wc = await EthereumProvider.init({
          projectId: process.env.REACT_APP_WC_PROJECT_ID,
          rpcMap: { 1: process.env.REACT_APP_INFURA_URL },
          chains: [1],
          showQrModal: true
        });
        await wc.enable();
        provider = new ethers.BrowserProvider(wc);

      } else /* coinbase */ {
        const cbWallet = new CoinbaseWalletSDK({ appName: "MeinShop", darkMode: false });
        const cbProv = cbWallet.makeWeb3Provider(process.env.REACT_APP_INFURA_URL, 1);
        await cbProv.request({ method: "eth_requestAccounts" });
        provider = new ethers.BrowserProvider(cbProv);
      }

      const signer = await provider.getSigner();
      const address = await signer.getAddress();

      // Zus√§tzliche Signatur f√ºr MetaMask & Coinbase
      if (connector === "metamask" || connector === "coinbase") {
        try {
          await signer.signMessage(`Bitte best√§tige, dass dies deine Wallet ist: ${address}`);
        } catch (err) {
          if (err.code === 4001) {
            alert("‚úã Signatur abgelehnt ‚Äì bitte best√§tige in deiner Wallet.");
            return;
          }
          throw err;
        }
      }

      // EIP-4361 Flow: Nonce holen, signieren, verifizieren
      const nonceRes = await fetch(`/api/nonce?token=${token}`);
      if (!nonceRes.ok) throw new Error("Nonce konnte nicht geladen werden");
      const { nonce } = await nonceRes.json();
      const signature = await signer.signMessage(`Bitte best√§tige: ${nonce}`);
      const verifyRes = await fetch(`/api/verify`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token, address, signature, nonce })
      });
      const verifyJson = await verifyRes.json();
      if (!verifyRes.ok || !verifyJson.success) {
        throw new Error("Signatur ung√ºltig ‚Äì bitte erneut versuchen.");
      }

      // Weiterleitung
      window.location.href = `https://www.goldsilverstuff.com/wallet-callback?token=${token}&wallet=${address}`;

    } catch (err) {
      console.error(err);
      alert(`‚ö†Ô∏è Fehler: ${err.message}`);
    }
  }

  return (
    <>
      <div style={{ position: '}
